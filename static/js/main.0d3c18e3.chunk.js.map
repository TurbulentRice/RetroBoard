{"version":3,"sources":["logo.svg","lib/helpers.js","contexts/StoriesContext.jsx","components/StoryCard.jsx","components/StoryColumn.jsx","components/RetroBoard.jsx","components/NavBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["getUID","Math","floor","random","getNow","Date","toDateString","StoriesContext","createContext","StoriesProvider","children","useState","title","id","owner","description","points","col","created","stories","setStories","Provider","value","StoryCard","story","useContext","editedStory","setEditedStory","editMode","setEditMode","useDrag","type","item","collect","monitor","isDragging","drag","toggleEditMode","handleSave","event","preventDefault","currentStories","map","currentStory","ref","className","draggable","opacity","htmlFor","onClick","onSubmit","e","style","display","placeholder","onChange","target","textOverflow","rows","filter","StoryColumn","colID","useDrop","accept","drop","console","log","newStories","isOver","options","newStory","index","RetroBoard","addStory","removeStory","storyToRemove","NavBar","logo","searchString","setSearchString","fontSize","href","src","alt","height","width","aria-label","App","DndProvider","backend","HTML5Backend","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d3c18e3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.24f1cbf3.svg\";","/*\n  Some helpful functions\n*/\n\n// Unique ID generator\n// Got this from https://stackoverflow.com/a/21816636\nexport const getUID = () => Math.floor(100000 + Math.random() * 900000);\n\n// Get current date as string\nexport const getNow = () => new Date().toDateString();\n\n// Return a new \"empty\" story object\n// Will overwrite template with anything provided in options obj\nexport const getNewStory = (options) => ({\n  title: \"\",\n  id: getUID(),\n  owner: \"\",\n  description: \"\",\n  points: 0,\n  col: 1,\n  created: getNow(),\n  ...options\n})\n\nexport const getTestStories = () => [\n  {\n    title: \"Get new access token\",\n    id: getUID(),\n    owner: \"Louise Belcher\",\n    description: \"Fix issue with multi-factor authentication\",\n    points: 3,\n    col: 1,\n    created: getNow()\n  },\n  {\n    title: \"Push code to production\",\n    id: getUID(),\n    owner: \"Louise Belcher\",\n    description: \"Commit new changes and deploy to production server.\",\n    points: 2,\n    col: 2,\n    created: getNow()\n  },\n  {\n    title: \"Fix major security issue\",\n    id: getUID(),\n    owner: \"A Person\",\n    description: \"Get that thing done\",\n    points: 6,\n    col: 3,\n    created: getNow()\n  },\n  {\n    title: \"Fix major security issue\",\n    id: getUID(),\n    owner: \"A Person\",\n    description: \"Get that thing done\",\n    points: 6,\n    col: 3,\n    created: getNow()\n  },\n]","import { createContext, useState } from 'react';\nimport { getTestStories } from '../lib/helpers';\n\nexport const StoriesContext = createContext();\n\nexport function StoriesProvider({ children }) {\n  // Keep track of all stories in single array of objects, no inherent order, like bucket\n  // Components will \"pick out\" stories relevant to them based on state/id\n  // Function to remove one card with all matching fields\n  const [stories, setStories] = useState(getTestStories());\n  \n  return (\n    <StoriesContext.Provider value={{stories, setStories}}>\n      {children}\n    </StoriesContext.Provider>\n  )\n}\n\n\n\n\n\n","import { StoriesContext } from '../contexts/StoriesContext'\nimport { useState, useContext } from 'react';\nimport { useDrag } from 'react-dnd';\n/*\nstory = {\n  title: \"\",\n  owner: \",\"\n  descrption: \"\",\n  points: Number,\n  id: Number,\n  col: Number,\n  row: Number,\n  created: Date\n}\n*/\n\nfunction StoryCard ({ story }) {\n  const { setStories } = useContext(StoriesContext);\n\n  // Temporary story input data - initialized to shallow copy of story prop\n  const [ editedStory, setEditedStory ] = useState({ ...story });\n  // Changes <p>s to controlled <input>s to update editedStory\n  const [ editMode, setEditMode ] = useState(false);\n\n  const [{ isDragging }, drag] = useDrag({\n    type: 'card',\n    item: {\n      type: 'card',\n      id: story.id\n    },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  });\n\n  const resetEditedStory = () => setEditedStory({ ...story });\n  const handleEdit = () => {\n    resetEditedStory();\n    toggleEditMode();\n  }\n  const toggleEditMode = () => setEditMode(!editMode);\n\n  const handleSave = event => {\n    event.preventDefault();\n    setStories(currentStories => {\n      return currentStories.map(currentStory => {\n        return currentStory.id === story.id \n          ? { ...editedStory }\n          : currentStory;\n      })\n    })\n    editMode && toggleEditMode();\n  }\n  const handleRemove = () => setStories(currentStories => currentStories.filter(currentStory => currentStory.id !== story.id));\n\n  // const drag = event => {\n  //   event.dataTransfer.setData('text', JSON.stringify(story))\n  // }\n  // const allowDrop = event => event.preventDefault();\n  // const drop = event => {\n  //   event.preventDefault();\n  //   const droppedStory =  JSON.parse(event.dataTransfer.getData('text'));\n  //   console.log(droppedStory);\n  //   // event.target.appendChild(document.getElementById(data))\n\n  //   // Instead of dropping the action DOM element, we'll simply change the colID\n  //   if (droppedStory.col !== story.colID) {\n  //     // setStories()\n  //   }\n  // }  \n\n  // Need  dnd context for this\n\n  return (\n    <div id={story.id}\n      ref={drag}\n      className=\"card text-start mb-3\"\n      draggable={true}\n      // onDragStart={e => drag(e)}\n      opacity={isDragging ? '0.5' : '1'}>\n\n      {/* Header */}\n      <div className=\"card-header d-flex justify-content-between\"> \n        {`#${story.id}`}\n\n        <div>\n          <button type='submit' htmlFor={`edit-mode-form-${story.id}`} className=\"btn btn-sm btn-light p-0 me-2\" onClick={handleSave}>\n            <i className=\"fal fa-save\"></i>\n          </button>\n          <button className=\"btn btn-sm btn-light p-0\" onClick={handleEdit}>\n            <i className=\"fal fa-edit\"></i>\n          </button>\n        </div>\n\n      </div>\n\n      {\n      // Normal mode card body\n      !editMode ?\n      \n      <div className=\"card-body pt-1\">\n        <small className=\"card-text text-muted mb-1\">{`Owner: ${story.owner}`}</small>\n        <p className=\"card-text lead mb-1\">{story.title}</p>\n        <p className=\"card-text\">{story.description}</p>\n      </div>\n\n      // Edit Mode card body\n      :\n      \n      <div className=\"card-body\">\n        <form id={`edit-mode-form-${story.id}`} className=\"form-group\" onSubmit={e => handleSave(e)}>\n\n          {/* Need this to enable submit on return press */}\n          <input type=\"submit\" style={{display: 'none'}} />\n\n          <input id={`owner-${story.id}`}\n            className=\"form-control mb-2\"\n            placeholder={story.owner || 'Owner'}\n            value={editedStory.owner}\n            onChange={e => setEditedStory({...editedStory, owner: e.target.value})}>\n          </input>\n\n          <input id={`title-${story.id}`}\n            className=\"lead form-control mb-2\"\n            style={{textOverflow: 'ellipsis'}}\n            placeholder={story.title || 'Title'}\n            type=\"text\"\n            value={editedStory.title}\n            onChange={e => setEditedStory({...editedStory, title: e.target.value})}>\n          </input>\n\n          <textarea id={`description-${story.id}`}\n            className=\"form-control\"\n            rows='4'\n            placeholder={story.description || 'Description'}\n            type=\"text\"\n            value={editedStory.description}\n            onChange={e => setEditedStory({...editedStory, description: e.target.value})}>\n          </textarea>\n\n        </form>\n      </div>\n      }\n\n      {/* Footer */}\n      <div className=\"card-footer d-flex justify-content-between\">\n        <small className=\"text-muted\">Created {story.created}</small>\n        <button className=\"btn btn-sm btn-light p-0\" onClick={handleRemove}>\n          <i className=\"fad fa-trash\"></i>\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default StoryCard;","import { getNewStory } from '../lib/helpers'\nimport { useDrop } from 'react-dnd';\nimport StoryCard from './StoryCard';\nimport { useContext } from 'react';\nimport { StoriesContext } from '../contexts/StoriesContext'\n\n// Receives stories, returns bootstrap col with cards\nfunction StoryColumn ({ title, colID }) {\n  const { stories, setStories } = useContext(StoriesContext)\n  \n  const addStory = newStory => setStories(currentStories => [newStory, ...currentStories]);\n  const removeStory = storyToRemove => setStories(currentStories => currentStories.filter(story => story.id !== storyToRemove.id))\n\n  const cardStories = stories.filter(story => story.col === colID);\n\n  // Make a new empty story object w/ colID and add to StoryContext\n  const handleAddStory = () => addStory(getNewStory({col: colID}));\n\n\n  // Accept drop\n  const [{ isOver }, drop] = useDrop({\n    accept: 'card',\n    drop: (item, monitor) => {\n      console.log(item)\n      // \"Move\" story by changing associated colID\n      const newStories = stories.map(story => story.id === item.id ? {...story, col: colID} : story);\n      setStories(newStories);\n    }\n    ,\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  })\n\n  return (\n    <div className=\"col\" ref={drop}>\n      <h2 className=\"display-6\">{title}</h2>\n\n      <div className=\"d-grid gap-2\">\n        <button className=\"btn btn-sm btn-success mb-2\" type='button' onClick={handleAddStory}>+</button>\n      </div>\n      \n      {stories.map((story, index) => story.col === colID && <StoryCard story={story} key={index}></StoryCard>)}\n      \n    </div>\n  )\n}\n\nexport default StoryColumn;","import { useContext } from 'react';\nimport { StoriesContext } from '../contexts/StoriesContext'\nimport StoryColumn from './StoryColumn'\n\n// TODO\n// Give StoryColumn access to state and have it pick out the stories relevant to it\nfunction RetroBoard () {\n  const { stories, setStories } = useContext(StoriesContext)\n\n  const addStory = newStory => setStories(currentStories => [newStory, ...currentStories]);\n  const removeStory = storyToRemove => setStories(currentStories => currentStories.filter(story => story.id !== storyToRemove.id))\n  const getWentWells = () => stories.filter(story => story.col === 1);\n  const getToImproves = () => stories.filter(story => story.col === 2);\n  const getActionItems = () => stories.filter(story => story.col === 3);\n\n  // Column components\n  return (\n      <div className=\"container mt-5 p-0\">\n        <div className=\"row\">\n\n          {/* Went wells */}\n          <StoryColumn title='What went well' colID={1} stories={getWentWells()} addStory={addStory} removeStory={removeStory}></StoryColumn>\n\n          {/* To improves */}\n          <StoryColumn title='To improve' colID={2} stories={getToImproves()} addStory={addStory} removeStory={removeStory}></StoryColumn>\n\n          {/* Action items */}\n          <StoryColumn title='Action items' colID={3} stories={getActionItems()} addStory={addStory} removeStory={removeStory}></StoryColumn>\n\n        </div>\n      </div>\n  )\n}\n\nexport default RetroBoard;","import { useState } from 'react';\n\nfunction NavBar ({ logo }) {\n  const [searchString, setSearchString] = useState('');\n\n\n  const handleSearch = event => {\n    event.preventDefault();\n    // Highlight matching card?\n  }\n\n  const handleChange = event => setSearchString(event.target.value);\n\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <div className=\"container-fluid\">\n\n        <a className=\"navbar-brand display-6 ms-4\" style={{fontSize: 20}} href=\"/\">\n          <img src={logo} alt={'Parrot Icon'} height='40' width='40'></img>  \n          RetroBoard\n        </a>\n\n        {/* <h1 className=\"display-6 me-3\">RetroBoard</h1>         */}\n\n        <form className=\"d-flex me-4\" onSubmit={e => handleSearch(e)}>\n          {/* Nav Search */}\n          <input className=\"form-control me-2\"\n            type=\"search\"\n            placeholder=\"Search\"\n            aria-label=\"Search\"\n            value={searchString}\n            onChange={e => handleChange(e)}>\n          </input>\n\n          {/* May not need search button if only scanning locally */}\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n        </form>\n          \n      </div>\n    </nav>\n  )\n}\n\nexport default NavBar;","import logo from './logo.svg';\nimport './App.css';\nimport RetroBoard from './components/RetroBoard';\nimport NavBar from './components/NavBar';\nimport { StoriesProvider } from './contexts/StoriesContext'\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend} from 'react-dnd-html5-backend'\n\n/* \n  This is the top of retroboard app\n  Requirements:\n  1) What went well\n  2) To imporove\n  3) Actions items\n*/\n\nfunction App() {\n  /*\n    App will just handle presenting main components\n    Wraps rest of app in story context\n  */\n  return (\n    <StoriesProvider>\n      <DndProvider backend={HTML5Backend}>\n        <div className=\"App\">\n\n          <NavBar logo={logo}></NavBar>\n\n          <RetroBoard></RetroBoard>\n          \n        </div>\n      </DndProvider>\n    </StoriesProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}